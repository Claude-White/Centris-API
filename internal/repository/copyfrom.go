// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForCreateAllBrokerExternalLink implements pgx.CopyFromSource.
type iteratorForCreateAllBrokerExternalLink struct {
	rows                 []CreateAllBrokerExternalLinkParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllBrokerExternalLink) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllBrokerExternalLink) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].BrokerID,
		r.rows[0].Type,
		r.rows[0].Link,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllBrokerExternalLink) Err() error {
	return nil
}

func (q *Queries) CreateAllBrokerExternalLink(ctx context.Context, arg []CreateAllBrokerExternalLinkParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"broker_external_links"}, []string{"id", "broker_id", "type", "link", "created_at"}, &iteratorForCreateAllBrokerExternalLink{rows: arg})
}

// iteratorForCreateAllBrokerPhone implements pgx.CopyFromSource.
type iteratorForCreateAllBrokerPhone struct {
	rows                 []CreateAllBrokerPhoneParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllBrokerPhone) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllBrokerPhone) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].BrokerID,
		r.rows[0].Type,
		r.rows[0].Number,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllBrokerPhone) Err() error {
	return nil
}

func (q *Queries) CreateAllBrokerPhone(ctx context.Context, arg []CreateAllBrokerPhoneParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"broker_phone"}, []string{"id", "broker_id", "type", "number", "created_at"}, &iteratorForCreateAllBrokerPhone{rows: arg})
}

// iteratorForCreateAllBrokers implements pgx.CopyFromSource.
type iteratorForCreateAllBrokers struct {
	rows                 []CreateAllBrokersParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllBrokers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllBrokers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].FirstName,
		r.rows[0].MiddleName,
		r.rows[0].LastName,
		r.rows[0].Title,
		r.rows[0].ProfilePhoto,
		r.rows[0].ComplementaryInfo,
		r.rows[0].ServedAreas,
		r.rows[0].Presentation,
		r.rows[0].CorporationName,
		r.rows[0].AgencyName,
		r.rows[0].AgencyAddress,
		r.rows[0].AgencyLogo,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
	}, nil
}

func (r iteratorForCreateAllBrokers) Err() error {
	return nil
}

func (q *Queries) CreateAllBrokers(ctx context.Context, arg []CreateAllBrokersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"broker"}, []string{"id", "first_name", "middle_name", "last_name", "title", "profile_photo", "complementary_info", "served_areas", "presentation", "corporation_name", "agency_name", "agency_address", "agency_logo", "created_at", "updated_at"}, &iteratorForCreateAllBrokers{rows: arg})
}

// iteratorForCreateAllBrokersProperties implements pgx.CopyFromSource.
type iteratorForCreateAllBrokersProperties struct {
	rows                 []CreateAllBrokersPropertiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllBrokersProperties) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllBrokersProperties) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].BrokerID,
		r.rows[0].PropertyID,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllBrokersProperties) Err() error {
	return nil
}

func (q *Queries) CreateAllBrokersProperties(ctx context.Context, arg []CreateAllBrokersPropertiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"broker_property"}, []string{"id", "broker_id", "property_id", "created_at"}, &iteratorForCreateAllBrokersProperties{rows: arg})
}

// iteratorForCreateAllProperties implements pgx.CopyFromSource.
type iteratorForCreateAllProperties struct {
	rows                 []CreateAllPropertiesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllProperties) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllProperties) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Title,
		r.rows[0].Category,
		r.rows[0].Address,
		r.rows[0].CityName,
		r.rows[0].Price,
		r.rows[0].Description,
		r.rows[0].BedroomNumber,
		r.rows[0].RoomNumber,
		r.rows[0].BathroomNumber,
		r.rows[0].Longitude,
		r.rows[0].Latitude,
	}, nil
}

func (r iteratorForCreateAllProperties) Err() error {
	return nil
}

func (q *Queries) CreateAllProperties(ctx context.Context, arg []CreateAllPropertiesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"property"}, []string{"id", "title", "category", "address", "city_name", "price", "description", "bedroom_number", "room_number", "bathroom_number", "longitude", "latitude"}, &iteratorForCreateAllProperties{rows: arg})
}

// iteratorForCreateAllPropertiesExpenses implements pgx.CopyFromSource.
type iteratorForCreateAllPropertiesExpenses struct {
	rows                 []CreateAllPropertiesExpensesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllPropertiesExpenses) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllPropertiesExpenses) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].PropertyID,
		r.rows[0].Type,
		r.rows[0].AnnualPrice,
		r.rows[0].MonthlyPrice,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllPropertiesExpenses) Err() error {
	return nil
}

func (q *Queries) CreateAllPropertiesExpenses(ctx context.Context, arg []CreateAllPropertiesExpensesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"property_expenses"}, []string{"id", "property_id", "type", "annual_price", "monthly_price", "created_at"}, &iteratorForCreateAllPropertiesExpenses{rows: arg})
}

// iteratorForCreateAllPropertiesFeatures implements pgx.CopyFromSource.
type iteratorForCreateAllPropertiesFeatures struct {
	rows                 []CreateAllPropertiesFeaturesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllPropertiesFeatures) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllPropertiesFeatures) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].PropertyID,
		r.rows[0].Title,
		r.rows[0].Value,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllPropertiesFeatures) Err() error {
	return nil
}

func (q *Queries) CreateAllPropertiesFeatures(ctx context.Context, arg []CreateAllPropertiesFeaturesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"property_features"}, []string{"id", "property_id", "title", "value", "created_at"}, &iteratorForCreateAllPropertiesFeatures{rows: arg})
}

// iteratorForCreateAllPropertiesPhotos implements pgx.CopyFromSource.
type iteratorForCreateAllPropertiesPhotos struct {
	rows                 []CreateAllPropertiesPhotosParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAllPropertiesPhotos) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAllPropertiesPhotos) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].PropertyID,
		r.rows[0].Link,
		r.rows[0].Description,
		r.rows[0].CreatedAt,
	}, nil
}

func (r iteratorForCreateAllPropertiesPhotos) Err() error {
	return nil
}

func (q *Queries) CreateAllPropertiesPhotos(ctx context.Context, arg []CreateAllPropertiesPhotosParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"property_photo"}, []string{"id", "property_id", "link", "description", "created_at"}, &iteratorForCreateAllPropertiesPhotos{rows: arg})
}
