// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: property_expenses.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

type CreateAllPropertiesExpensesParams struct {
	ID           uuid.UUID  `json:"id"`
	PropertyID   int64      `json:"property_id"`
	Type         string     `json:"type"`
	AnnualPrice  float32    `json:"annual_price"`
	MonthlyPrice float32    `json:"monthly_price"`
	CreatedAt    *time.Time `json:"created_at"`
}

const createPropertyExpenses = `-- name: CreatePropertyExpenses :one
INSERT INTO property_expenses (id, property_id, type, annual_price, monthly_price, created_at)
values (uuid_generate_v4(), $1, $2, $3, $4, $5)
RETURNING id
`

type CreatePropertyExpensesParams struct {
	PropertyID   int64      `json:"property_id"`
	Type         string     `json:"type"`
	AnnualPrice  float32    `json:"annual_price"`
	MonthlyPrice float32    `json:"monthly_price"`
	CreatedAt    *time.Time `json:"created_at"`
}

func (q *Queries) CreatePropertyExpenses(ctx context.Context, arg CreatePropertyExpensesParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createPropertyExpenses,
		arg.PropertyID,
		arg.Type,
		arg.AnnualPrice,
		arg.MonthlyPrice,
		arg.CreatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
