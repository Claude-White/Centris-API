// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BrokerLinkType string

const (
	BrokerLinkTypeWebsite   BrokerLinkType = "website"
	BrokerLinkTypeLinkedin  BrokerLinkType = "linkedin"
	BrokerLinkTypeFacebook  BrokerLinkType = "facebook"
	BrokerLinkTypeTwitter   BrokerLinkType = "twitter"
	BrokerLinkTypeInstagram BrokerLinkType = "instagram"
	BrokerLinkTypeYoutube   BrokerLinkType = "youtube"
)

func (e *BrokerLinkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BrokerLinkType(s)
	case string:
		*e = BrokerLinkType(s)
	default:
		return fmt.Errorf("unsupported scan type for BrokerLinkType: %T", src)
	}
	return nil
}

type NullBrokerLinkType struct {
	BrokerLinkType BrokerLinkType
	Valid          bool // Valid is true if BrokerLinkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBrokerLinkType) Scan(value interface{}) error {
	if value == nil {
		ns.BrokerLinkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BrokerLinkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBrokerLinkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BrokerLinkType), nil
}

type ExpenseType string

const (
	ExpenseTypeTax         ExpenseType = "tax"
	ExpenseTypeInsurance   ExpenseType = "insurance"
	ExpenseTypeMaintenance ExpenseType = "maintenance"
	ExpenseTypeUtilities   ExpenseType = "utilities"
	ExpenseTypeOther       ExpenseType = "other"
)

func (e *ExpenseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExpenseType(s)
	case string:
		*e = ExpenseType(s)
	default:
		return fmt.Errorf("unsupported scan type for ExpenseType: %T", src)
	}
	return nil
}

type NullExpenseType struct {
	ExpenseType ExpenseType
	Valid       bool // Valid is true if ExpenseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExpenseType) Scan(value interface{}) error {
	if value == nil {
		ns.ExpenseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExpenseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExpenseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExpenseType), nil
}

type PhoneType string

const (
	PhoneTypeMobile PhoneType = "mobile"
	PhoneTypeOffice PhoneType = "office"
	PhoneTypeHome   PhoneType = "home"
	PhoneTypeFax    PhoneType = "fax"
)

func (e *PhoneType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PhoneType(s)
	case string:
		*e = PhoneType(s)
	default:
		return fmt.Errorf("unsupported scan type for PhoneType: %T", src)
	}
	return nil
}

type NullPhoneType struct {
	PhoneType PhoneType
	Valid     bool // Valid is true if PhoneType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPhoneType) Scan(value interface{}) error {
	if value == nil {
		ns.PhoneType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PhoneType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPhoneType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PhoneType), nil
}

type PropertyCategory string

const (
	PropertyCategoryHouse      PropertyCategory = "house"
	PropertyCategoryApartment  PropertyCategory = "apartment"
	PropertyCategoryCondo      PropertyCategory = "condo"
	PropertyCategoryLand       PropertyCategory = "land"
	PropertyCategoryCommercial PropertyCategory = "commercial"
)

func (e *PropertyCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PropertyCategory(s)
	case string:
		*e = PropertyCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for PropertyCategory: %T", src)
	}
	return nil
}

type NullPropertyCategory struct {
	PropertyCategory PropertyCategory
	Valid            bool // Valid is true if PropertyCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPropertyCategory) Scan(value interface{}) error {
	if value == nil {
		ns.PropertyCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PropertyCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPropertyCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PropertyCategory), nil
}

type PropertyStatus string

const (
	PropertyStatusAvailable PropertyStatus = "available"
	PropertyStatusPending   PropertyStatus = "pending"
	PropertyStatusSold      PropertyStatus = "sold"
	PropertyStatusRented    PropertyStatus = "rented"
	PropertyStatusOffMarket PropertyStatus = "off_market"
)

func (e *PropertyStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PropertyStatus(s)
	case string:
		*e = PropertyStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PropertyStatus: %T", src)
	}
	return nil
}

type NullPropertyStatus struct {
	PropertyStatus PropertyStatus
	Valid          bool // Valid is true if PropertyStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPropertyStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PropertyStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PropertyStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPropertyStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PropertyStatus), nil
}

type Broker struct {
	ID                int64           `json:"id"`
	FirstName         string          `json:"firstName"`
	MiddleName        pgtype.Text     `json:"middleName" swaggertype:"string"`
	LastName          string          `json:"lastName"`
	Title             string          `json:"title"`
	ProfilePhoto      pgtype.Text     `json:"profilePhoto" swaggertype:"string"`
	ComplementaryInfo pgtype.Text     `json:"complementaryInfo" swaggertype:"string"`
	ServedAreas       pgtype.Text     `json:"servedAreas" swaggertype:"string"`
	Presentation      pgtype.Text     `json:"presentation" swaggertype:"string"`
	CorporationName   pgtype.Text     `json:"corporationName" swaggertype:"string"`
	AgencyName        string          `json:"agencyName"`
	AgencyAddress     string          `json:"agencyAddress"`
	AgencyLogo        pgtype.Text     `json:"agencyLogo" swaggertype:"string"`
	CreatedAt         pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
	UpdatedAt         pgtype.Timestamptz `json:"updatedAt" swaggertype:"string"`
}

type BrokerExternalLink struct {
	ID        pgtype.UUID     `json:"id" swaggertype:"string"`
	BrokerID  int64           `json:"brokerId"`
	Type      string          `json:"type"`
	Link      string          `json:"link"`
	CreatedAt pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}

type BrokerPhone struct {
	ID        pgtype.UUID     `json:"id" swaggertype:"string"`
	BrokerID  int64           `json:"brokerId"`
	Type      string          `json:"type"`
	Number    string          `json:"number"`
	IsPrimary pgtype.Bool     `json:"isPrimary" swaggertype:"boolean"`
	CreatedAt pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}

type BrokerProperty struct {
	ID              pgtype.UUID     `json:"id" swaggertype:"string"`
	BrokerID        int64           `json:"brokerId"`
	PropertyID      int64           `json:"propertyId"`
	IsPrimaryBroker pgtype.Bool     `json:"isPrimaryBroker" swaggertype:"boolean"`
	CreatedAt       pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}

type Property struct {
	ID                int64           `json:"id"`
	Title             string          `json:"title"`
	Category          string          `json:"category"`
	CivicNumber       pgtype.Text     `json:"civicNumber" swaggertype:"string"`
	StreetName        pgtype.Text     `json:"streetName" swaggertype:"string"`
	ApartmentNumber   pgtype.Text     `json:"apartmentNumber" swaggertype:"string"`
	CityName          pgtype.Text     `json:"cityName" swaggertype:"string"`
	NeighbourhoodName pgtype.Text     `json:"neighbourhoodName" swaggertype:"string"`
	Price             pgtype.Numeric  `json:"price" swaggertype:"number"`
	Description       pgtype.Text     `json:"description" swaggertype:"string"`
	BedroomNumber     pgtype.Int4     `json:"bedroomNumber" swaggertype:"integer"`
	RoomNumber        pgtype.Int4     `json:"roomNumber" swaggertype:"integer"`
	BathroomNumber    pgtype.Int4     `json:"bathroomNumber" swaggertype:"integer"`
	Latitude          pgtype.Numeric  `json:"latitude" swaggertype:"number"`
	Longitude         pgtype.Numeric  `json:"longitude" swaggertype:"number"`
	CreatedAt         pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
	UpdatedAt         pgtype.Timestamptz `json:"updatedAt" swaggertype:"string"`
}

type PropertyExpense struct {
	ID           pgtype.UUID     `json:"id" swaggertype:"string"`
	PropertyID   int64           `json:"propertyId"`
	Type         string          `json:"type"`
	AnnualPrice  pgtype.Numeric  `json:"annualPrice" swaggertype:"number"`
	MonthlyPrice pgtype.Numeric  `json:"monthlyPrice" swaggertype:"number"`
	CreatedAt    pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}

type PropertyFeature struct {
	ID         pgtype.UUID     `json:"id" swaggertype:"string"`
	PropertyID int64           `json:"propertyId"`
	Title      string          `json:"title"`
	Value      string          `json:"value"`
	CreatedAt  pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}

type PropertyPhoto struct {
	ID          pgtype.UUID     `json:"id" swaggertype:"string"`
	PropertyID  int64           `json:"propertyId"`
	Link        string          `json:"link"`
	Description pgtype.Text     `json:"description" swaggertype:"string"`
	IsPrimary   pgtype.Bool     `json:"isPrimary" swaggertype:"boolean"`
	CreatedAt   pgtype.Timestamptz `json:"createdAt" swaggertype:"string"`
}
