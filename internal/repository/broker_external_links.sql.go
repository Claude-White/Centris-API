// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: broker_external_links.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBrokerExternalLink = `-- name: CreateBrokerExternalLink :one
INSERT INTO broker_external_links (id, broker_id, type, link, created_at)
values (uuid_generate_v4(), $1, $2, $3, $4)
RETURNING id
`

type CreateBrokerExternalLinkParams struct {
	BrokerID  int64      `json:"broker_id"`
	Type      string     `json:"type"`
	Link      string     `json:"link"`
	CreatedAt *time.Time `json:"created_at"`
}

func (q *Queries) CreateBrokerExternalLink(ctx context.Context, arg CreateBrokerExternalLinkParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createBrokerExternalLink,
		arg.BrokerID,
		arg.Type,
		arg.Link,
		arg.CreatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAllBrokerLinksByBrokerId = `-- name: GetAllBrokerLinksByBrokerId :many
SELECT id, broker_id, type, link, created_at FROM broker_external_links
WHERE broker_external_links.broker_id = $1
`

func (q *Queries) GetAllBrokerLinksByBrokerId(ctx context.Context, brokerID int64) ([]BrokerExternalLink, error) {
	rows, err := q.db.Query(ctx, getAllBrokerLinksByBrokerId, brokerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerExternalLink
	for rows.Next() {
		var i BrokerExternalLink
		if err := rows.Scan(
			&i.ID,
			&i.BrokerID,
			&i.Type,
			&i.Link,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
